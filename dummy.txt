
// function extractUserFromPayload(params) {
//   return;
// }

// passport.use(
//     //   new Strategy(
//     //     {
//     //       clientID: config.googleID,
//     //       clientSecret: config.googleSecret,
//     //       callbackURL: "/api/auth/google/callback",
//     //     },

//     //       try {
//     //         const exists = await  User.find({ email: user.email });
//     //         if (exists)
//     //       } catch () {

//     //       }

//     //     }
//     //   )
//     // );
//     // passport.serializeUser((user, done) => {
//     //   done(null, user.id);
//     // });
//     // passport.deserializeUser((id, done) => {
//     //   console.log(id, done);
//     // });

// async (accessToken, refreshToken, profile, done) => {
//           // steps [ extract user and arrange user, check if user exists, if user doesn't exist create user, send done]
//           const person = profile._json;
//           const details = {
//             firstName: person.given_name,
//             lastName: person.family_name,
//             email: person.email,
//             profileImage: person.picture,
//           };

// Promise.resolve()
//             .then(extractDetails)
//             .then(checkIfUserExists)
//             .then(createIfNotExists)
//             .send(sendResponse)
//             .catch((err) => done(err, null));

//           function extractDetails() {

//             return Promise.resolve(details);
//           }

//           function checkIfUserExists(user) {
//             console.log("send 1 response");
//             // return Promise.all([
//             //
//             //   Promise.resolve(user),
//             // ]);
//           }

//           function createIfNotExists([exists, user]) {
//             console.log("send 2 response");
//             if (exists) return Promise.resolve(user);

//             return User.create(user);
//           }

//           function sendResponse(user) {
//             console.log(user);
//             //return done(null, user);
//           }


//routes
// // logout route
// authRouter.post("/logout", (req, res) => {
//   req.session.destroy();
//   res.send({
//     message: "you're now logged out",
//   });
// });

// // failed
// authRouter.get("/failed", (req, res) => {
//   res.json({
//     message: "Authentication Fail",
//   });
// });

// // dummy markup for test
// authRouter.get("/login", (req, res) => {
//   res.send(`
//     <form action="/api/auth/login" method="POST">
//       <input type="email" name="email" placeholder="email" required>
//       <input type="password" name="password" placeholder="password" required>
//       <input type="submit" value="Submit">
//     </form>
//   `);
// });

// authRouter.get("/register", (req, res) => {
//   res.send(`
//     <form action="/api/auth/register" method="POST"> <br />
//       <input name="firstName" placeholder="first name" required> <br />
//       <input name="lastName" placeholder="last name" required> <br />
//       <input type="email" name="email" placeholder="email" required> <br />
//       <input type="password" name="password" placeholder="password" required> <br />
//       <input name="confirmPassword" type="password" placeholder="password" required>
//       <input type="submit" value="Submit">
//     </form>
//   `);
// });

// export function getCoordinates(req, res, next) {
//   // opencage
//   //   .geocode({ q: req.body.address.lga + "," + req.body.address.state })
//   //   .then((data) => {
//   //     const results = data.results.map((r) => r.geometry);
//   //     req.body.geometry.coordinates = [results[0].lng, results[0].lat];
//   //     next();
//   //   })
//   //   .catch((error) => {
//   //     console.log("error", error.message);
//   //     next(error)
//   //   });
//   try {

//   } catch (err) {

//   }
// }



import { Apartment } from "../models";
class ApartmentController {
  static async create(req, res, next) {
    let errors, message;
    if (req.body.published) {
      errors = null;
      message = "apartment has been successfully listed";
    } else {
      errors = {};
      errors.user = "Account not verified... no user profile video found";
      message = "apartment listing saved to drafts";
    }
    try {
      req.body.posted_by = req.session.user;
      req.body.geometry.type = "Point";
      const created = await Apartment.create(req.body);
      if (!created) throw new Error("server failed to respond");
      return res.json({
        data: created,
        errors,
        message,
      });
    } catch (err) {
      console.error(err);
      return next({
        status: 500,
        errorr: {
          apartment: err,
        },
        message: "failed to post apartment",
      });
    }
  }

  static async findOne(req, res, next) {
    try {
      const apartment = await Apartment.findById(req.params.id).populate(
        "posted_by",
        "firstName lastName email"
      );
      if (!apartment) throw new Error("invalid apartment id");
      res.json({
        data: apartment,
        errors: null,
        message: "apartment found",
      });
    } catch (err) {
      next({
        status: 404,
        errors: { apartment: err },
        message: "apartment not found",
      });
    }
  }

  static async search(req, res, next) {
    let { lat, lng, price, state, type, radius, coordinates } = req.query;
    const query = { sold: false };
    const queryOptions = [];
    if (coordinates) {
      query.geometry = {
        $within: { $centerSphere: [[lng, lat], radius / 6371] },
      };
    }
    // if (price) {
    //   queryOptions.push({
    //     price: {
    //       $lte: price,
    //     },
    //   });
    // }
    // if (state) {
    //   queryOptions.push({ state });
    // }
    // if (type) {
    //   queryOptions.push({ type });
    // }
    // if (queryOptions.length) {
    //   query["$or"] = queryOptions;
    // }

    console.log(query);
    try {
      const apartments = await Apartment.find(query).populate(
        "posted_by",
        "firstName lastName email"
      );
      res.json({
        data: apartments,
        errors: null,
        message: "apartments found",
      });
    } catch (err) {
      console.error(err);
      next({
        status: 500,
        errors: { request: "failed to perform search" },
        message: "apartments not found",
      });
    }
  }

  static async update(req, res, next) {
    try {
      const apartment = await Apartment.findById(req.params.id);
      for (const prop in req.body) {
        if (!(req.body[prop] instanceof Object) || prop == "attachments") {
          apartment[prop] = req.body[prop];
        } else {
          for (const n in req.body[prop]) {
            apartment[prop][n] = req.body[prop][n];
          }
        }
      }
      if (await apartment.save()) {
        return res.json({
          data: apartment,
          errors: null,
          message: "apartment details have been updated",
        });
      }
    } catch (err) {
      console.error(err);
      next({
        status: 400,
        errors: {
          apartment: err.message,
        },
        message: "failed to update apartment",
      });
    }
  }

  static async getAll(req, res, next) {
    try {
      const data = await Apartment.find({ published: 1 });
      res.send({
        data: data,
        errors: null,
        message: "list of featured apartment retireved",
      });
    } catch (err) {
      next({
        status: 500,
        errors: {
          request: "serve failed to respond :(",
        },
        message: "failed to retrieve featured apartments",
      });
    }
  }
}

export default ApartmentController;
